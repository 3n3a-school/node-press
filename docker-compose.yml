version: '3'

services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - ./infra/templates:/etc/nginx/templates
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
    ports:
      - 80:${NGINX_PORT}
    depends_on:
      - api
      - postgres
      - pgweb
    networks:
      - backend
    
  api:
    container_name: "node_press_${NODE_ENV}"
    image: "node_press_${NODE_ENV}"
    depends_on:
      - postgres
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./backend
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    entrypoint: ["npm", "run", "start:${NODE_ENV}"]
    env_file:
      - .env
    ports:
      - ${BACKEND_PORT}:3000
    networks:
      - backend
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  postgres:
    container_name: "node_press_postgres"
    image: postgres:alpine
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: "${POSTGRES_DB_PREFIX}_${POSTGRES_DB_NAME}"
      PG_DATA: /var/lib/postgresql/data
    ports:
      - ${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}
    volumes:
      - postgres:/var/lib/postgresql/data

  pgweb:
    restart: always
    image: sosedoff/pgweb
    ports: 
      - "8081:8081" 
    networks:
      - backend
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_DB_PORT}/${POSTGRES_DB_PREFIX}_${POSTGRES_DB_NAME}?sslmode=disable
    depends_on:
      - postgres

networks:
  backend:

volumes:
  postgres: